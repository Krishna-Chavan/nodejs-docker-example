name: Build Docker Images

on:
  push:
    branches:
      - docker

env:
  AWS_REGION: 'us-east-1'                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 'ui-image'           # set this to your Amazon ECR repository name
  ECS_SERVICE: 'ui-service'                 # set this to your Amazon ECS service name
  ECS_CLUSTER: 'devkrishna-cluster'                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: 'task-definition.json' # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: 'ui'           # set this to the name of the container in the

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg \
              lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo \
              "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          
      - name: Build Docker images
        run: docker-compose up -d

      - name: images
        run: |
          pwd
          docker images

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: tag images
        id: build-image
        run: |
          docker tag frontend:latest 103886749662.dkr.ecr.us-east-1.amazonaws.com/ui-image:latest
          docker push 103886749662.dkr.ecr.us-east-1.amazonaws.com/ui-image:latest
          echo "image=103886749662.dkr.ecr.us-east-1.amazonaws.com/ui-image:latest" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
      
